}
pred_rating <- predict(model, testing_set)
error = mean(as.numeric(pred_rating) != as.numeric(testing_set$button_pressed))
performances[fold] <- error
# print (paste0(fold, "  training Error: ", error_train, "  hold out Error: ", error))
}
return (performances)
}
m1 = "button_pressed ~  category + norm_shape * norm_spatial"
result = crossvalidate(train_set, k=5, m=m1, dependent='button_pressed')
crossvalidate <- function(data, k, m, dependent){
performances <- c()
for (fold in 1:k){
testing_set <- data[data$.folds == fold,]
training_set <- data[data$.folds != fold,]
model <- polr(m, training_set, Hess=TRUE)
newdat = cbind(training_set, predict(model, training_set, type = "probs"))
error_train = 0
for (i in newdat){
human_rep = i['button_pressed']
error_train = error_train + (1 - i[as.character(human_rep)])^2
}
pred_rating <- predict(model, testing_set)
error = mean(as.numeric(pred_rating) != as.numeric(testing_set$button_pressed))
performances[fold] <- error
# print (paste0(fold, "  training Error: ", error_train, "  hold out Error: ", error))
}
return (performances)
}
m1 = "button_pressed ~  category + norm_shape * norm_spatial"
result = crossvalidate(train_set, k=5, m=m1, dependent='button_pressed')
crossvalidate <- function(data, k, m, dependent){
performances <- c()
for (fold in 1:k){
testing_set <- data[data$.folds == fold,]
training_set <- data[data$.folds != fold,]
model <- polr(m, training_set, Hess=TRUE)
newdat = cbind(training_set, predict(model, training_set, type = "probs"))
error_train = 0
for (i in newdat){
human_rep = i['button_pressed']
error_train = error_train + (1 - i[as.character(human_rep)])^2
}
pred_rating <- predict(model, testing_set)
error = mean(as.numeric(pred_rating) != as.numeric(testing_set$button_pressed))
performances[fold] <- error
# print (paste0(fold, "  training Error: ", error_train, "  hold out Error: ", error))
}
return (performances)
}
m1 = "button_pressed ~  category + norm_shape * norm_spatial"
result = crossvalidate(train_set, k=5, m=m1, dependent='button_pressed')
model1 = polr(m1, train_set, Hess=TRUE)
predicted = predict(model1, test_set, type = "probs")
newdat = cbind(test_set, predict(model1, test_set, type = "probs"))
#diff = mean(as.numeric(predicted) != as.numeric(test_set$button_pressed))
summary(model1)
#diff
#table(test_set$button_pressed, predicted)
crossvalidate <- function(data, k, m, dependent){
performances <- c()
for (fold in 1:k){
testing_set <- data[data$.folds == fold,]
training_set <- data[data$.folds != fold,]
model <- polr(m, training_set, Hess=TRUE)
newdat = cbind(training_set, predict(model, training_set, type = "probs"))
error_train = 0
for (i in newdat){
human_rep = i['button_pressed']
error_train = error_train + (1 - i[as.character(human_rep)])^2
}
# pred_rating <- predict(model, testing_set)
newdat = cbind(test_set, predict(model, test_set, type = "probs"))
error_test = 0
for (i in newdat){
human_rep = i['button_pressed']
error_test = error_test + (1 - i[as.character(human_rep)])^2
}
performances[fold] <- error
# print (paste0(fold, "  training Error: ", error_train, "  hold out Error: ", error))
}
return (performances)
}
m1 = "button_pressed ~  category + norm_shape * norm_spatial"
result = crossvalidate(train_set, k=5, m=m1, dependent='button_pressed')
crossvalidate <- function(data, k, m, dependent){
performances <- c()
for (fold in 1:k){
testing_set <- data[data$.folds == fold,]
training_set <- data[data$.folds != fold,]
model <- polr(m, training_set, Hess=TRUE)
# newdat = cbind(training_set, predict(model, training_set, type = "probs"))
# error_train = 0
# for (i in newdat){
#   human_rep = i['button_pressed']
#   error_train = error_train + (1 - i[as.character(human_rep)])^2
# }
# pred_rating <- predict(model, testing_set)
newdat = cbind(test_set, predict(model, test_set, type = "probs"))
error_test = 0
for (i in newdat){
human_rep = i['button_pressed']
error_test = error_test + (1 - i[as.character(human_rep)])^2
}
performances[fold] <- error
# print (paste0(fold, "  training Error: ", error_train, "  hold out Error: ", error))
}
return (performances)
}
m1 = "button_pressed ~  category + norm_shape * norm_spatial"
result = crossvalidate(train_set, k=5, m=m1, dependent='button_pressed')
crossvalidate <- function(data, k, m, dependent){
performances <- c()
for (fold in 1:k){
testing_set <- data[data$.folds == fold,]
training_set <- data[data$.folds != fold,]
model <- polr(m, training_set, Hess=TRUE)
# newdat = cbind(training_set, predict(model, training_set, type = "probs"))
# error_train = 0
# for (i in newdat){
#   human_rep = i['button_pressed']
#   error_train = error_train + (1 - i[as.character(human_rep)])^2
# }
# pred_rating <- predict(model, testing_set)
newdat = cbind(test_set, predict(model, test_set, type = "probs"))
error_test = 0
for (i in newdat){
human_rep = i['button_pressed']
error_test = error_test + (1 - i[as.character(human_rep)])^2
}
performances[fold] <- error_test
# print (paste0(fold, "  training Error: ", error_train, "  hold out Error: ", error))
}
return (performances)
}
m1 = "button_pressed ~  category + norm_shape * norm_spatial"
result = crossvalidate(train_set, k=5, m=m1, dependent='button_pressed')
print (paste0("Average MSE across all folds: ", mean(result)))
crossvalidate <- function(data, k, m, dependent){
performances <- c()
for (fold in 1:k){
testing_set <- data[data$.folds == fold,]
training_set <- data[data$.folds != fold,]
model <- polr(m, training_set, Hess=TRUE)
# newdat = cbind(training_set, predict(model, training_set, type = "probs"))
# error_train = 0
# for (i in newdat){
#   human_rep = i['button_pressed']
#   error_train = error_train + (1 - i[as.character(human_rep)])^2
# }
# pred_rating <- predict(model, testing_set)
newdat = cbind(test_set, predict(model, test_set, type = "probs"))
error_test = 0
for (i in newdat){
human_rep = i['button_pressed']
error_test = error_test + (1 - as.numeric(i[as.character(human_rep)]))^2
}
performances[fold] <- error_test
# print (paste0(fold, "  training Error: ", error_train, "  hold out Error: ", error))
}
return (performances)
}
m1 = "button_pressed ~  category + norm_shape * norm_spatial"
result = crossvalidate(train_set, k=5, m=m1, dependent='button_pressed')
print (paste0("Average MSE across all folds: ", mean(result)))
crossvalidate <- function(data, k, m, dependent){
performances <- c()
for (fold in 1:k){
testing_set <- data[data$.folds == fold,]
training_set <- data[data$.folds != fold,]
model <- polr(m, training_set, Hess=TRUE)
# newdat = cbind(training_set, predict(model, training_set, type = "probs"))
# error_train = 0
# for (i in newdat){
#   human_rep = i['button_pressed']
#   error_train = error_train + (1 - i[as.character(human_rep)])^2
# }
# pred_rating <- predict(model, testing_set)
newdat = cbind(test_set, predict(model, test_set, type = "probs"))
error_test = 0
for (i in newdat){
human_rep = i['button_pressed']
error_test = error_test + (1 - as.numeric(i[as.character(human_rep)]))^2
}
performances[fold] <- error_test
# print (paste0(fold, "  training Error: ", error_train, "  hold out Error: ", error))
print(error_test)
}
return (performances)
}
m1 = "button_pressed ~  category + norm_shape * norm_spatial"
result = crossvalidate(train_set, k=5, m=m1, dependent='button_pressed')
print (paste0("Average MSE across all folds: ", mean(result)))
m1 = "button_pressed ~  norm_shape"
model1 = polr(m1, train_set, Hess=TRUE)
predicted = predict(model1, test_set, type = "probs")
newdat = cbind(test_set, predict(model1, test_set, type = "probs"))
#diff = mean(as.numeric(predicted) != as.numeric(test_set$button_pressed))
summary(model1)
#diff
#table(test_set$button_pressed, predicted)
library(tidyverse)
library(lme4)
library(groupdata2)
library(dplyr)
library(knitr)
library(broom)
library(hydroGOF)
mdata = read.csv('tracing_raw.csv')
mdata$category = factor(mdata$category, levels = c('square', 'shape'))
mdata$has_ref = as.logical(mdata$has_ref)
mdata$norm_shape = scale(mdata$post_tran)
mdata$norm_spatial = scale(mdata$spatial)
rater_data = mdata[!is.na(mdata$human_rating),]
for (t in c('square', 'shape')){
for (i in seq(2, 10, by=1) ){
sub = subset(rater_data , category == t & age == i)
print (c(t, i, nrow(sub)) )
}
}
raw = read.csv('museumstation_tracing_ncc2.csv')
#raw = read.csv('tracing_ordinal_data.csv')
raw$category = factor(raw$category, levels = c('square', 'shape', 'circle'))
raw$has_ref = as.logical(raw$has_ref)
raw = raw[raw$has_ref==TRUE,]
raw[raw$human_norm_rating==-10.0, 'human_norm_rating'] = NA
raw[raw$human_rating==-10.0, 'human_rating'] = NA
raw[raw$button_pressed == -10.0, 'button_pressed'] = NA
write.csv(raw, 'tracing_raw.csv', row.names = FALSE)
mdata = read.csv('tracing_raw.csv')
mdata$category = factor(mdata$category, levels = c('square', 'shape'))
mdata$has_ref = as.logical(mdata$has_ref)
mdata$norm_shape = scale(mdata$post_tran)
mdata$norm_spatial = scale(mdata$spatial)
rater_data = mdata[!is.na(mdata$human_rating),]
for (t in c('square', 'shape')){
for (i in seq(2, 10, by=1) ){
sub = subset(rater_data , category == t & age == i)
print (c(t, i, nrow(sub)) )
}
}
nrow(rater_data)
nrow(mdata)
unique(data[,c('session_id','category','age')])
unique(mdata[,c('session_id','category','age')])
udata = unique(mdata[,c('session_id','category','age')])
nrow(udata)
nrow(mdata)
udata = unique(mdata[,c('session_id','category')])
nrow(udata)
nrow(rater_data)
unique(rater_data[, 'workerId'])
unique(rater_data[, 'workerId'])\
cdata = read.csv('classification.csv')
getwed()
getwd()
setwd("/Users/zixianchai/Desktop/compositionality/shapedraw/analysis/tracing")
cdata = read.csv('classification.csv')
nrow(cdata)
length(unique(cdata$session_id))
length(unique(rater_data$session_id))
length(unique(rater_data[, c('session_id', 'category')]))
length(unique(rater_data$session_id))
urater = unique(rater_data$session_id)
uclass = unique(cdata$session_id)
overlap(urater,uclass)
intersect(urater,uclass)
urater
uclass
uclass='cdm_'+uclass
paste("cdm_", uclass, sep="")
uclass
cdata
paste("cdm_", cdata$session_id, sep="")
cdata
cdata = paste("cdm_", cdata$session_id, sep="")
cdata
uclass = unique(cdata)
nrow(uclass)
unique(cdata)
uclass = unique(cdata)
len(uclass)
length(uclass)
uclass
urater
length(urater)
intersect(urater, uclass)
in = intersect(urater,uclass)
inter = intersect(urater,uclass)
len(inter)
length(inter)
cdata = read.csv('classification.csv')
urated_t = unique(rater_data, c('session_id', 'category'))
urated_t = unique(rater_data[, c('session_id', 'category')])
length(urated_t)
nrow(urated_t)
uclass_t = unique(cdata[, c('session_id', 'category')])
inter
condition <- rater_data$session_id %in% inter
nrow(condition)
condition
length(condition==TRUE)
length(condition)
condition==TRUE
condition
crater = rater_data[condition]
crater = rater_data[condition,]
nrow(crater)
cdata = read.csv('classification.csv')
uid_class = unique(cdata$session_id)
uid_rater = unique(rater_data$session_id)
inter_uid = intersect(uid_class, uid_rater)
print (length(inter_uid))
cdata = read.csv('classification.csv')
uid_class = unique(cdata$session_id)
uid_rater = unique(rater_data$session_id)
inter_uid = intersect(uid_class, uid_rater)
print (nrow(inter_uid))
cdata = read.csv('classification.csv')
cdata$session_id = paste("cdm_", cdata$session_id, sep="")
uid_class = unique(cdata$session_id)
uid_rater = unique(rater_data$session_id)
inter_uid = intersect(uid_class, uid_rater)
print (nrow(inter_uid))
cdata$session_id
cdata = read.csv('classification.csv')
cdata$session_id = paste("cdm_", cdata$session_id, sep="")
uid_class = unique(cdata$session_id)
uid_rater = unique(rater_data$session_id)
inter_uid = intersect(uid_class, uid_rater)
print (length(inter_uid))
cdata = read.csv('classification.csv')
cdata$session_id = paste("cdm_", cdata$session_id, sep="")
uid_class = unique(cdata$session_id)
uid_rater = unique(rater_data$session_id)
inter_uid = intersect(uid_class, uid_rater)
print (length(inter_uid))
condition = rater_data$session_id %in% inter_uid
print (nrow(rater_data[condition,]))
cdata = read.csv('classification.csv')
cdata$session_id = paste("cdm_", cdata$session_id, sep="")
uid_class = unique(cdata$session_id)
uid_rater = unique(rater_data$session_id)
inter_uid = intersect(uid_class, uid_rater)
print (length(inter_uid))
condition = rater_data$session_id %in% inter_uid
print (nrow(rater_data[condition,]))
uid_mdata = unique(mdata$session_id)
inter_uid = intersect(uid_class, uid_mdata)
condition = mdata$session_id %in% inter_uid
print (nrow(mdata[condition,]))
library(tidyverse)
library(lme4)
library(groupdata2)
library(dplyr)
library(knitr)
library(broom)
library(hydroGOF)
raw = read.csv('museumstation_tracing_ncc.csv')
#raw = read.csv('tracing_ordinal_data.csv')
raw$category = factor(raw$category, levels = c('square', 'shape', 'circle'))
raw$has_ref = as.logical(raw$has_ref)
raw = raw[raw$has_ref==TRUE,]
raw[raw$human_norm_rating==-10.0, 'human_norm_rating'] = NA
raw[raw$human_rating==-10.0, 'human_rating'] = NA
raw[raw$button_pressed == -10.0, 'button_pressed'] = NA
write.csv(raw, 'tracing_raw.csv', row.names = FALSE)
library(tidyverse)
library(lme4)
library(groupdata2)
library(dplyr)
library(knitr)
library(broom)
library(hydroGOF)
mdata = read.csv('tracing_raw.csv')
mdata$category = factor(mdata$category, levels = c('square', 'shape'))
mdata$has_ref = as.logical(mdata$has_ref)
mdata$norm_shape = scale(mdata$post_tran)
mdata$norm_spatial = scale(mdata$spatial)
rater_data = mdata[!is.na(mdata$human_rating),]
for (t in c('square', 'shape')){
for (i in seq(2, 10, by=1) ){
sub = subset(rater_data , category == t & age == i)
print (c(t, i, nrow(sub)) )
}
}
cdata = read.csv('classification.csv')
cdata$session_id = paste("cdm_", cdata$session_id, sep="")
uid_class = unique(cdata$session_id)
uid_rater = unique(rater_data$session_id)
inter_uid = intersect(uid_class, uid_rater)
print (length(inter_uid))
condition = rater_data$session_id %in% inter_uid
print (nrow(rater_data[condition,]))
uid_mdata = unique(mdata$session_id)
inter_uid = intersect(uid_class, uid_mdata)
condition = mdata$session_id %in% inter_uid
print (nrow(mdata[condition,]))
raw = read.csv('museumstation_tracing_ncc2.csv')
#raw = read.csv('tracing_ordinal_data.csv')
raw$category = factor(raw$category, levels = c('square', 'shape', 'circle'))
raw$has_ref = as.logical(raw$has_ref)
raw = raw[raw$has_ref==TRUE,]
raw[raw$human_norm_rating==-10.0, 'human_norm_rating'] = NA
raw[raw$human_rating==-10.0, 'human_rating'] = NA
raw[raw$button_pressed == -10.0, 'button_pressed'] = NA
write.csv(raw, 'tracing_raw.csv', row.names = FALSE)
raw = read.csv('museumstation_tracing_ncc2.csv')
#raw = read.csv('tracing_ordinal_data.csv')
raw$category = factor(raw$category, levels = c('square', 'shape', 'circle'))
raw$has_ref = as.logical(raw$has_ref)
raw = raw[raw$has_ref==TRUE,]
raw[raw$human_norm_rating==-10.0, 'human_norm_rating'] = NA
raw[raw$human_rating==-10.0, 'human_rating'] = NA
raw[raw$button_pressed == -10.0, 'button_pressed'] = NA
write.csv(raw, 'tracing_raw.csv', row.names = FALSE)
raw = read.csv('museumstation_tracing_ncc2.csv')
#raw = read.csv('tracing_ordinal_data.csv')
raw$category = factor(raw$category, levels = c('square', 'shape', 'circle'))
raw$has_ref = as.logical(raw$has_ref)
raw = raw[raw$has_ref==TRUE,]
raw[raw$human_norm_rating==-10.0, 'human_norm_rating'] = NA
raw[raw$human_rating==-10.0, 'human_rating'] = NA
write.csv(raw, 'tracing_raw.csv', row.names = FALSE)
library(tidyverse)
library(lme4)
library(groupdata2)
library(dplyr)
library(knitr)
library(broom)
library(hydroGOF)
mdata = read.csv('tracing_raw.csv')
mdata$category = factor(mdata$category, levels = c('square', 'shape'))
mdata$has_ref = as.logical(mdata$has_ref)
mdata$norm_shape = scale(mdata$post_tran)
mdata$norm_spatial = scale(mdata$spatial)
rater_data = mdata[!is.na(mdata$human_rating),]
for (t in c('square', 'shape')){
for (i in seq(2, 10, by=1) ){
sub = subset(rater_data , category == t & age == i)
print (c(t, i, nrow(sub)) )
}
}
cdata = read.csv('classification.csv')
cdata$session_id = paste("cdm_", cdata$session_id, sep="")
uid_class = unique(cdata$session_id)
uid_rater = unique(rater_data$session_id)
inter_uid = intersect(uid_class, uid_rater)
print (length(inter_uid))
condition = rater_data$session_id %in% inter_uid
print (nrow(rater_data[condition,]))
uid_mdata = unique(mdata$session_id)
inter_uid = intersect(uid_class, uid_mdata)
condition = mdata$session_id %in% inter_uid
print (nrow(mdata[condition,]))
library(tidyverse)
library(lme4)
library(groupdata2)
library(dplyr)
library(knitr)
library(broom)
library(hydroGOF)
mdata = read.csv('tracing_raw.csv')
mdata$category = factor(mdata$category, levels = c('square', 'shape'))
mdata$has_ref = as.logical(mdata$has_ref)
mdata$norm_shape = scale(mdata$post_tran)
mdata$norm_spatial = scale(mdata$spatial)
rater_data = mdata[!is.na(mdata$human_rating),]
for (t in c('square', 'shape')){
for (i in seq(2, 10, by=1) ){
sub = subset(rater_data , category == t & age == i)
print (c(t, i, nrow(sub)) )
}
}
parts <- partition(rater_data, p = 0.2, cat_col = c("age", "category"))
test_set <- parts[[1]]
train_set <- parts[[2]]
train_set <- fold(train_set, k=5, cat_col = c("age", "category"))
train_set <- train_set[order(train_set$.folds),]
train_set %>%
count(age, category, .folds) %>%
kable(align='c')
crossvalidate <- function(data, k, m, dependent){
performances <- c()
for (fold in 1:k){
testing_set <- data[data$.folds == fold,]
training_set <- data[data$.folds != fold,]
model <-  lm(m, training_set)
predicted <- predict(model, testing_set, allow.new.levels=TRUE)
MSE <- mean((predicted - testing_set[[dependent]])^2)
predicted_train <- predict(model, training_set, allow.new.levels=TRUE)
MSE_train <- mean((predicted_train - training_set[[dependent]])^2)
performances[fold] <- MSE
print (paste0(fold, "  training MSE: ", MSE_train, "  hold out MSE: ", MSE))
}
return (performances)
}
m1 = "human_norm_rating ~  category + norm_shape * norm_spatial"
result = crossvalidate(train_set, k=5, m=m1, dependent='human_norm_rating')
print (paste0("Average MSE across all folds: ", mean(result)))
model1 = lm(m1, train_set)
predicted = predict(model1, test_set, allow.new.levels=TRUE)
MSE = mean((predicted - test_set[['human_norm_rating']])^2)
summary(model1)
MSE
model1 = lm(m1, rater_data, REML = FALSE) # Apply the model on the full training set
final_set = mdata[is.na(mdata$human_rating), ]
predicted = predict(model1, final_set, allow.new.levels=TRUE)
summary(model1)
final_set$human_norm_rating = predicted
output = rbind(rater_data, final_set)
write.csv(output, file = "tracing_eval.csv")
